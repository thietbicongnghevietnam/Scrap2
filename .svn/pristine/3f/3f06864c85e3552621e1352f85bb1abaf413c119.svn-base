@using ScrapSystem.Api.Application.DTOs.VerifyDataDtos
@model List<List<VerificationResult>>

@{
    ViewData["Title"] = "Verify data";
    var types = new List<SelectListItem>
    {
        new SelectListItem { Value = "1", Text = "SAP + Hệ thống" },
        new SelectListItem { Value = "2", Text = "File tool + Hệ thống" },
        new SelectListItem { Value = "3", Text = "Label List + Hệ thống" }
    };
}

<h2>@ViewData["Title"]</h2>

<div class="card mb-3 p-2">
    <form class="row g-3 mb-3" id="uploadForm" enctype="multipart/form-data" asp-action="Verify" asp-controller="Scrap">
        <div class="col-md-5">
            <input type="file" class="form-control" id="FileSap" name="File" accept=".xlsx,.xls">
        </div>
        <div class="col-md-3">
            <label>So sánh</label>
            <select name="Type" asp-items="types" class="form-select"></select>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Verify</button>
        </div>
    </form>
</div>

<div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
    <div class="d-flex flex-row card p-4">
        <div class="table-responsive">
            <h4>Không tồn tại</h4>

            <table class="table table-striped table-hover w-max-content" id="notExistTable">
                <thead class="table-light">
                    <tr>
                        <th>STT</th>
                        <th>Material</th>
                        <th>Sloc</th>
                        <th>Section</th>
                        <th>Unit</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody id="notExistTbody">
                </tbody>
            </table>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-start" id="pagination1">
                </ul>
            </nav>
        </div>
        <div class="table-responsive">
            <h4>số lượng không khớp</h4>
            <table class="table table-striped table-hover w-max-content" id="conflictTable">
                <thead class="table-light">
                    <tr>
                        <th>STT</th>
                        <th>Material</th>
                        <th>Sloc</th>
                        <th>Section</th>
                        <th>Unit</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody id="conflictTbody">
                </tbody>
            </table>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-start" id="pagination2">
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
    const notExist = @(Model != null && Model[0] != null ? Html.Raw(Json.Serialize(Model[0])) : "[]");
    const existConflictQty = @(Model != null && Model[1] != null ? Html.Raw(Json.Serialize(Model[1])) : "[]");

    const rowsPerPage = 50;
    let currentPageNotExist = 1;
    let currentPageConflict = 1;

    function renderTableNotExist(page) {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const paginatedNotExist = notExist.slice(start, end);
        const notExistTbody = document.getElementById('notExistTbody');
        notExistTbody.innerHTML = '';
        paginatedNotExist.forEach((item, i) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                      <td>${start + i + 1}</td>
              <td>${item.material}</td>
              <td>${item.sloc}</td>
              <td>${item.sanction}</td>
              <td>${item.qty}</td> `;
            notExistTbody.appendChild(row);
        });
        renderPaginationNotExist();
    }

    function renderTableConflict(page) {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const paginatedConflict = existConflictQty.slice(start, end);
        const conflictTbody = document.getElementById('conflictTbody');
        conflictTbody.innerHTML = '';
        paginatedConflict.forEach((item, i) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                                    <td>${start + i + 1}</td>
                            <td>${item.material}</td>
                             <td>${item.sloc}</td>
                             <td>${item.sanction}</td>
                             <td>${item.qty}</td>`;
            conflictTbody.appendChild(row);
        });
        renderPaginationConflict();
    }


    function renderPaginationNotExist() {
        const totalPages = Math.ceil(notExist.length / rowsPerPage);
        const pagination = document.getElementById('pagination1');
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPageNotExist === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePageNotExist(${currentPageNotExist - 1}); return false;">Previous</a>`;
        pagination.appendChild(prevLi);

        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPageNotExist - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        if (startPage > 1) {
            const firstPage = document.createElement('li');
            firstPage.className = `page-item`;
            firstPage.innerHTML = `<a class="page-link" href="#" onclick="changePageNotExist(1); return false;">1</a>`;
            pagination.appendChild(firstPage);

            if (startPage > 2) {
                const dots = document.createElement('li');
                dots.className = `page-item disabled`;
                dots.innerHTML = `<a class="page-link" href="#">...</a>`;
                pagination.appendChild(dots);
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('li');
            pageBtn.className = `page-item ${i === currentPageNotExist ? 'active' : ''}`;
            pageBtn.innerHTML = `<a class="page-link" href="#" onclick="changePageNotExist(${i}); return false;">${i}</a>`;
            pagination.appendChild(pageBtn);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const dots = document.createElement('li');
                dots.className = `page-item disabled`;
                dots.innerHTML = `<a class="page-link" href="#">...</a>`;
                pagination.appendChild(dots);
            }

            const lastPage = document.createElement('li');
            lastPage.className = `page-item`;
            lastPage.innerHTML = `<a class="page-link" href="#" onclick="changePageNotExist(${totalPages}); return false;">${totalPages}</a>`;
            pagination.appendChild(lastPage);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPageNotExist === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePageNotExist(${currentPageNotExist + 1}); return false;">Next</a>`;
        pagination.appendChild(nextLi);
    }

    function renderPaginationConflict() {
        const totalPages = Math.ceil(existConflictQty.length / rowsPerPage);
        const pagination = document.getElementById('pagination2');
        pagination.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPageConflict === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePageConflict(${currentPageConflict - 1}); return false;">Previous</a>`;
        pagination.appendChild(prevLi);

        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPageConflict - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        if (startPage > 1) {
            const firstPage = document.createElement('li');
            firstPage.className = `page-item`;
            firstPage.innerHTML = `<a class="page-link" href="#" onclick="changePageConflict(1); return false;">1</a>`;
            pagination.appendChild(firstPage);

            if (startPage > 2) {
                const dots = document.createElement('li');
                dots.className = `page-item disabled`;
                dots.innerHTML = `<a class="page-link" href="#">...</a>`;
                pagination.appendChild(dots);
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('li');
            pageBtn.className = `page-item ${i === currentPageConflict ? 'active' : ''}`;
            pageBtn.innerHTML = `<a class="page-link" href="#" onclick="changePageConflict(${i}); return false;">${i}</a>`;
            pagination.appendChild(pageBtn);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const dots = document.createElement('li');
                dots.className = `page-item disabled`;
                dots.innerHTML = `<a class="page-link" href="#">...</a>`;
                pagination.appendChild(dots);
            }

            const lastPage = document.createElement('li');
            lastPage.className = `page-item`;
            lastPage.innerHTML = `<a class="page-link" href="#" onclick="changePageConflict(${totalPages}); return false;">${totalPages}</a>`;
            pagination.appendChild(lastPage);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPageConflict === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePageConflict(${currentPageConflict + 1}); return false;">Next</a>`;
        pagination.appendChild(nextLi);
    }

    function changePageNotExist(page) {
        if (page < 1 || page > Math.ceil(notExist.length / rowsPerPage)) return;
        currentPageNotExist = page;
        renderTableNotExist(page);
    }

    function changePageConflict(page) {
        if (page < 1 || page > Math.ceil(existConflictQty.length / rowsPerPage)) return;
        currentPageConflict = page;
        renderTableConflict(page);
    }

    renderTableNotExist(currentPageNotExist);
    renderTableConflict(currentPageConflict);
</script>