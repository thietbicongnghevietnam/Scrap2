using AutoMapper;
using ScrapSystem.Api.Application.DTOs.MaterialName;
using ScrapSystem.Api.Application.DTOs.ScrapDetailDtos;
using ScrapSystem.Api.Application.DTOs.ScrapDtos;
using ScrapSystem.Api.Application.Service.IServices;
using ScrapSystem.Api.Data.Repositories.IRepositories;
using ScrapSystem.Api.Domain.Models;
using ScrapSystem.Api.Application.Response;
using ScrapSystem.Api.Utilities;
using Serilog;
using System.Data;
using Microsoft.EntityFrameworkCore;
using ScrapSystem.Api.Application.DTOs.ScrapImageDtos;
using ScrapSystem.Api.Application.Request;

namespace ScrapSystem.Api.Application.Service
{
    public class ImportSrcapService : IImportScrapService
    {
        private readonly IUnitOfWork _unitOfWork;

        private readonly IMapper _mapper;

        private readonly ExcelHelper _excelHelper;

        public ImportSrcapService(IUnitOfWork unitOfWork, ExcelHelper excelHelper, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _excelHelper = excelHelper;
            _mapper = mapper;
        }

        public async Task<ApiResult<ScrapDto>> ImportScrapAsync(IFormFile file)
        {
            try
            {
                string[] headers = new string[] { "SanctionID", "SubType", "MoveType", "IssueOutDate", "STT", "Plan", "Sloc", "CostCenter", "NameCost", "Material", "Quatity", "UnitPrice", "Amount", "Reason" };
                string sanction = file.FileName.Split(".", StringSplitOptions.None)[0];
                var data = _excelHelper.ExcelIssueOutToScarp(file);
                var scrapExist = await _unitOfWork.ScrapRepository.GetScrapBySanctionAndStausAsync(sanction, 0);

                Scrap scrap;
                if (scrapExist != null)
                {
                    scrap = scrapExist;
                    _mapper.Map(data.Item1, scrap); 
                    await _unitOfWork.ScrapRepository.Update(scrap);
                    await _unitOfWork.ScrapDetailRepository.DeleteBySanctionId(scrapExist.Id);
                }
                else
                {
                    scrap = _mapper.Map<Scrap>(data.Item1);
                    await _unitOfWork.ScrapRepository.Add(scrap);
                }

                await _unitOfWork.SaveChangesAsync();

                var scrapDetails = _mapper.Map<List<ScrapDetail>>(data.Item2);
                foreach (var detail in scrapDetails)
                {
                    detail.SanctionId = scrap.Id;
                }

                await _unitOfWork.ScrapDetailRepository.AddMultiEntities(scrapDetails);
                await _unitOfWork.SaveChangesAsync();

                return new ApiResult<ScrapDto>
                {
                    IsSuccess = true,
                    Message = "Import scrap successfully!",
                    MasterDetail = new ParentWithChildren<ScrapDto, ScrapDetailDto>
                    {
                        Parent = data.Item1,
                        Children = data.Item2
                    }
                };
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
                return new ApiResult<ScrapDto>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }
        }

        public async Task<ApiResult<MaterialNameDto>> ImportMaterialNameAsync(IFormFile file)
        {
            try
            {
                string[] headers = new string[] { "PartNo", "EnglishName", "VietNameseName" };
                List<MaterialNameDto> materialNameDtos = _excelHelper.ExcelToMaterialName(file);

                var materialNames = _mapper.Map<List<MaterialName>>(materialNameDtos);
                var data = materialNames.DistinctBy(x => x.Material).ToList();

                await _unitOfWork.MaterialNameRepository.AddMultiEntities(materialNames.DistinctBy(x => x.Material).ToList());
                await _unitOfWork.SaveChangesAsync();
                return new ApiResult<MaterialNameDto>
                {
                    IsSuccess = true,
                    Message = "Import scrap successfully !",
                    Items = materialNameDtos
                };
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);

                return new ApiResult<MaterialNameDto>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }

        }

        public async Task<ApiResult<ScrapViewDto>> LoadData(ScrapRequest request)
        {
            try
            {
                var rs = await _unitOfWork.ScrapRepository.GetReportScrapByDate(request.StartDate, request.EndDate, request.Status, request.Page, request.PageSize);

                return new ApiResult<ScrapViewDto>
                {
                    IsSuccess = true,
                    Message = "Import scrap successfully !",
                    PagedResult = new PaginatedResult<ScrapViewDto>
                    {
                        Records = rs.Data,
                        TotalCount = rs.TotalCount
                    }
                };
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);

                return new ApiResult<ScrapViewDto>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }



        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="barCode">sanctionId;pallet</param>
        /// <returns></returns>
        public async Task<ApiResult<ScrapImageDto>> LoadImage(string sanctionId, string pallet)
        {
            try
            {
                var parameters = new { ScrapId = sanctionId };

                var (imageScraps , imageScrapDetails)= await _unitOfWork.ImageScrapRepository.ExecuteStoredProcedureMultiDataAsync<ScrapImageDto, ScrapImageDetailDto>(
                    "GetImageScrap",
                    parameters);
                return new ApiResult<ScrapImageDto>
                {
                    IsSuccess = true,
                    Items = imageScraps,
                    MasterDetail = new ParentWithChildren<ScrapImageDto, ScrapImageDetailDto>
                    {
                       Parent = imageScraps.FirstOrDefault(),
                       Children = imageScrapDetails
                    }
                };
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);

                return new ApiResult<ScrapImageDto>
                {
                    IsSuccess = false,
                    Message = ex.Message
                };
            }
        }

    }
}
