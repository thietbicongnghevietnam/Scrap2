@model IPagedList<ScrapSystem.Api.Application.DTOs.ScrapDtos.ScrapViewDto>
@using X.PagedList
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Danh sách hàng hủy";
    var stt = (Model.PageNumber - 1) * Model.PageSize + 1;

    var today = DateTime.Now.ToString("yyyy-MM-dd");

    var listItems = new List<SelectListItem>
    {
        new SelectListItem { Value = "-1", Text = "Tất cả" },
        new SelectListItem { Value = "0", Text = "Chưa xử lý" },
        new SelectListItem { Value = "1", Text = "Đã xử lý" }
    };

    var appendixItems = new List<SelectListItem>
    {
        new SelectListItem { Value = "1", Text = "Phụ lục 01" },
        new SelectListItem { Value = "2", Text = "Phụ lục 02" },
        new SelectListItem { Value = "3", Text = "Phụ lục 03" }
    };
}

<h2>@ViewData["Title"]</h2>

<div class="card mb-3 p-2">
    <form class="row g-3 mb-3" id="filterForm">
        <div class="col-md-3">
            <label>Ngày bắt đầu</label>
            <input type="date" name="startDate" value="@ViewBag.StartDate" class="form-control" />
        </div>
        <div class="col-md-3">
            <label>Ngày kết thúc</label>
            <input type="date" name="endDate" value="@ViewBag.EndDate" class="form-control" />
        </div>
        <div class="col-md-3">
            <label>Trạng thái</label>
            <select name="status" asp-items="listItems" class="form-select"></select>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn btn-primary mr-3" asp-action="Privacy" asp-controller="Scrap">Tìm kiếm</button>
            <a class="btn btn-primary" onclick="appendixModal.show();">Appendix</a>
        </div>

    </form>

</div>

<div class="card">
    <div class="table-responsive">
        <table class="table table-striped table-hover w-max-content">
            <thead class="table-light">
                <tr>
                    <th>STT</th>
                    <th>SanctionID</th>
                    <th>Material</th>
                    <th>English Name</th>
                    <th>Vietnamese Name</th>
                    <th>Sub Type</th>
                    <th>Section</th>
                    <th>Move Type</th>
                    <th>Reason</th>
                    <th>Cost Center</th>
                    <th>Name Cost</th>
                    <th>Sloc</th>
                    <th>Plant</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Qty Actual</th>
                    <th>Unit Price</th>
                    <th>Amount</th>
                    <th>Issue Out Date</th>
                    <th>Status</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Count > 0)
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@stt</td>
                            <td>@item.Sanction</td>
                            <td>@item.Material</td>
                            <td>@item.EnglishName</td>
                            <td>@item.VietnameseName</td>
                            <td>@item.SubType</td>
                            <td>@item.Section</td>
                            <td>@item.MoveType</td>
                            <td>@item.Reason</td>
                            <td>@item.CostCenter</td>
                            <td>@item.NameCost</td>
                            <td>@item.Sloc</td>
                            <td>@item.Plant</td>
                            <td>@item.Unit</td>
                            <td>@(item.Qty?.ToString("N2") ?? "")</td>
                            <td>@(item.QtyActual?.ToString("N2") ?? "")</td>
                            <td>@(item.UnitPrice?.ToString("N2") ?? "")</td>
                            <td>@(item.Amount?.ToString("N2") ?? "")</td>
                            <td>@(item.IssueOutDate?.ToString("yyyy-MM-dd") ?? "")</td>
                            <td>@item.Status</td>
                            <td>
                                <p>
                                    <a href="javascript:void(0)" onclick="loadImage('@item.SanctionId', '@item.Pallet')">Chi tiết</a>
                                </p>

                            </td>
                        </tr>
                        stt++;
                    }
                else
                {
                    <div> Không có dữ liệu để Hiển thị.</div>
                }

            </tbody>
        </table>
    </div>
</div>



<nav aria-label="" class="mt-3">
    @Html.PagedListPager(Model, page => Url.Action("Privacy", new
        {
            page,
            status = ViewBag.Status,
            startDate = ViewBag.StartDate,
            endDate = ViewBag.EndDate
        }),
            new PagedListRenderOptions
    {
        UlElementClasses = new[] { "pagination", "justify-content-center" },
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" },
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        DisplayLinkToFirstPage = PagedListDisplayMode.Never,
        DisplayLinkToLastPage = PagedListDisplayMode.Never,
        LinkToPreviousPageFormat = "« Trước",
        LinkToNextPageFormat = "Sau »",
        ContainerDivClasses = new[] { "d-flex", "justify-content-center" },
        EllipsesFormat = "...",
        MaximumPageNumbersToDisplay = 5
    })
</nav>

<!-- Modal image -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h5 class="modal-title fw-bold" id="modalProductName" onclick="showImage(dataSanction.items);">Sanction</h5>
                    <small class="text-muted" id="modalProductId">Mã: </small>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-4">
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <div class="position-relative">
                                <img id="mainImageBefore" src="" class="w-100 rounded" style="height: 300px; object-fit: cover;" />
                                <button id="prevBtnBefore" class="btn btn-dark position-absolute top-50 start-0 translate-middle-y ms-2">
                                    <i class="fa-solid fa-angle-left"></i>
                                </button>
                                <button id="nextBtnBefore" class="btn btn-dark position-absolute top-50 end-0 translate-middle-y me-2">
                                    <i class="fa-solid fa-angle-right"></i>
                                </button>
                                <div id="imageCounterBefore" class="position-absolute bottom-0 start-50 translate-middle-x bg-dark text-white px-2 py-1 rounded small"></div>
                            </div>
                            <div class="d-flex gap-2 mt-3 overflow-auto" id="thumbnailContainerBefore"></div>
                        </div>
                        <div>
                            <div class="position-relative">
                                <img id="mainImageAfter" src="" class="w-100 rounded" style="height: 300px; object-fit: cover;" />
                                <button id="prevBtnAfter" class="btn btn-dark position-absolute top-50 start-0 translate-middle-y ms-2">
                                    <i class="fa-solid fa-angle-left"></i>
                                </button>
                                <button id="nextBtnAfter" class="btn btn-dark position-absolute top-50 end-0 translate-middle-y me-2">
                                    <i class="fa-solid fa-angle-right"></i>
                                </button>
                                <div id="imageCounterAfter" class="position-absolute bottom-0 start-50 translate-middle-x bg-dark text-white px-2 py-1 rounded small"></div>
                            </div>
                            <div class="d-flex gap-2 mt-3 overflow-auto" id="thumbnailContainerAfter"></div>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Barcode</label>
                                <span id="modalCategory"></span>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Trạng thái</label>
                                <span id="modalStatus" class="badge"></span>
                            </div>

                            <div class="row-md-6 mb-3">
                                <label class="form-label">Ngày hủy</label>
                                <span id="modalDestroyDate"></span>
                            </div>

                            <div class="col-12 mb-3">
                                <label class="form-label">Người phụ trách</label>
                                <span id="modalResponsible"></span>
                            </div>
                        </div>

                        <div style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-striped table-hover table-bordered" style="width: 100%; border-collapse: collapse;">
                                <thead class="table-light" style="position: sticky; top: 0; z-index: 1;">
                                    <tr>
                                        <th>STT</th>
                                        <th>Material</th>
                                        <th>Pallet</th>
                                        <th>Unit</th>
                                        <th>Quantity</th>
                                    </tr>
                                </thead>
                                <tbody id="scrapDetails">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal image -->
<div class="modal fade" id="appendixModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h5 class="modal-title fw-bold" id="modalProductName">Tạo phụ lục</h5>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3 mb-3">
                    <div class="col-md-3">
                        <label>Ngày bắt đầu</label>
                        <input type="date" id="startDateGenerate" value="@ViewBag.StartDate" class="form-control" />
                    </div>
                    <div class="col-md-3">
                        <label>Ngày kết thúc</label>
                        <input type="date" id="endDateGenerate" value="@ViewBag.EndDate" class="form-control" />
                    </div>
                    <div class="col-md-3">
                        <label>Loại phụ lục</label>
                        <select id="appendixGenerate" asp-items="appendixItems" class="form-select"></select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <a class="btn btn-primary" onclick="generateAppendix();">Generate</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    const thumbBefore = document.getElementById('thumbnailContainerBefore');
    const thumbAfter = document.getElementById('thumbnailContainerAfter');
    const imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
    const appendixModal = new bootstrap.Modal(document.getElementById('appendixModal'));
    let currentImageIndex = 0;
    let currentItem = null;
    let dataSanction = [];

    function getStatus(status) {
        switch (status) {
            case '0': return 'Chờ xử lý';
            case '1': return 'Đã xử lý';
            default: return 'Chờ xử lý';
        }
    }

    function getStatusColor(status) {
        switch (status) {
            case '0': return 'bg-warning text-dark';
            case '1': return 'bg-success';
            case '2': return 'bg-danger';
            default: return 'bg-secondary';
        }
    }


    function displayTableModal(data) {
        const tableBody = document.getElementById("scrapDetails");
        tableBody.innerHTML = '';

        const uniqueMaterials = [];
        const seenMaterials = new Set();

        data.forEach(item => {
            if (!seenMaterials.has(item.material)) {
                seenMaterials.add(item.material);
                uniqueMaterials.push(item);
            }
        });

        uniqueMaterials.forEach((item, index) => {
            const row = document.createElement("tr");
            row.onclick = () => {
                showImage(item);
            };
            row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${item.material || ''}</td>
                        <td>${item.pallet || ''}</td>
                        <td>${item.imageType || ''}</td>
                        <td>${item.quantity || ''}</td>
                    `;
            tableBody.appendChild(row);
        });
    }


    async function loadImage(sanctionId, pallet) {

        const params = new URLSearchParams({
            sanctionId: sanctionId,
            pallet: pallet
        });

        try {
            const response = await fetch(`LoadImage?${params.toString()}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            dataSanction = data;
            showImageModal(dataSanction.masterDetail);

        } catch (error) {
            console.error('Error fetching image data:', error);
            return null;
        }
    }

    let currentImageIndexBefore = 0;
    let currentImageIndexAfter = 0;
    let beforeImages = [];
    let afterImages = [];

    function updateImage(type) {
        const isBefore = type === 'before';
        const imgEl = document.getElementById(`mainImage${isBefore ? 'Before' : 'After'}`);
        const images = isBefore ? beforeImages : afterImages;
        const currentIndex = isBefore ? currentImageIndexBefore : currentImageIndexAfter;

        imgEl.src = images[currentIndex].imagePath;
        document.getElementById(`imageCounter${isBefore ? 'Before' : 'After'}`).textContent = `${currentIndex + 1} / ${images.length}`;

        const thumbContainer = document.getElementById(`thumbnailContainer${isBefore ? 'Before' : 'After'}`);
        Array.from(thumbContainer.children).forEach((img, index) => {
            img.classList.remove('border-primary', 'border-secondary');
            img.classList.add(index === currentIndex ? 'border-primary' : 'border-secondary');
        });
    }

    document.getElementById('prevBtnBefore').addEventListener('click', () => {
        currentImageIndexBefore = currentImageIndexBefore === 0 ? beforeImages.length - 1 : currentImageIndexBefore - 1;
        updateImage('before');
    });

    document.getElementById('nextBtnBefore').addEventListener('click', () => {
        currentImageIndexBefore = (currentImageIndexBefore + 1) % beforeImages.length;
        updateImage('before');
    });

    document.getElementById('prevBtnAfter').addEventListener('click', () => {
        currentImageIndexAfter = currentImageIndexAfter === 0 ? afterImages.length - 1 : currentImageIndexAfter - 1;
        updateImage('after');
    });

    document.getElementById('nextBtnAfter').addEventListener('click', () => {
        currentImageIndexAfter = (currentImageIndexAfter + 1) % afterImages.length;
        updateImage('after');
    });

    function updateThumb(children) {
        thumbBefore.innerHTML = '';
        thumbAfter.innerHTML = '';
        beforeImages = children.filter(img => img.imageType === 'B');
        afterImages = children.filter(img => img.imageType === 'A');

        [beforeImages, afterImages].forEach((images, idx) => {
            const thumbContainer = idx === 0 ? thumbBefore : thumbAfter;
            const type = idx === 0 ? 'before' : 'after';

            images.forEach((img, index) => {
                const thumb = document.createElement('img');
                thumb.src = img.imagePath;
                thumb.className = `rounded border ${index === 0 ? 'border-primary' : 'border-secondary'} cursor-pointer`;
                thumb.style = "width: 48px; height: 48px; object-fit: cover;";
                thumb.onclick = () => {
                    if (type === 'before') {
                        currentImageIndexBefore = index;
                        updateImage('before');
                    } else {
                        currentImageIndexAfter = index;
                        updateImage('after');
                    }
                };
                thumbContainer.appendChild(thumb);
            });
        });

        // Initialize images
        if (beforeImages.length > 0) updateImage('before');
        if (afterImages.length > 0) updateImage('after');
    }

    function showImageModal(item) {
        let parent = item.parent;
        let children = item.children;
        currentItem = item;
        currentImageIndexBefore = 0;
        currentImageIndexAfter = 0;

        document.getElementById('modalProductName').textContent = parent.sanction;
        document.getElementById('modalProductId').textContent = 'Mã: ' + parent.sanction;
        document.getElementById('modalStatus').textContent = getStatus(parent.status);
        document.getElementById('modalStatus').className = 'badge ' + getStatusColor(parent.status);
        document.getElementById('modalDestroyDate').textContent = new Date(parent.issueOutDate).toLocaleDateString('vi-VN');

        displayTableModal(children);
        updateThumb(children);
        showImage(dataSanction.items);
        imageModal.show();
    }

    function showImage(data) {
        if (Array.isArray(data)) {
            updateThumb(data);
        } else {
            const filteredChildren = dataSanction.masterDetail.children.filter(child => child.material === data.material);
            updateThumb(filteredChildren);
        }
    }

    async function generateAppendix() {

        let startDate = document.getElementById('startDateGenerate');
        let endDate = document.getElementById('endDateGenerate');
        let appendix = document.getElementById('appendixGenerate');

        const params = new URLSearchParams({
            startDate: startDate.value,
            endDate: endDate.value,
            appendix: appendix.value
        });

        try {
            const response = await fetch(`GenerateAppendix?${params.toString()}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = 'Appendix.xlsx'; 
            document.body.appendChild(a);
            a.click();

            a.remove();
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Error fetching image data:', error);
            return null;
        }
    }

</script>

